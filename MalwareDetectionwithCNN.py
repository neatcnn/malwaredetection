import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from tensorflow.keras.initializers import glorot_uniform

data = pd.read_csv(r"dataset-malware.csv")

data['classification'] = data.classification.map({'B': 0, 'S': 1})
data = data.sample(frac=1).reset_index(drop=True)

sns.countplot(data["classification"])
#plt.show()

X = data.drop(["Name", "classification"], axis=1)
Y = data["classification"]
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

input_size = x_train.shape[1]
output_size = 2

model = tf.keras.Sequential([
    Conv1D(256, kernel_size=3, activation='relu', input_shape=(input_size, 1)),
    MaxPooling1D(2),
    Conv1D(128, kernel_size=3, activation='relu', padding='same'),
    MaxPooling1D(2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.2),
    Dense(output_size, activation='softmax')
])

model.summary()

model.compile(optimizer='RMSprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

batch_size = 10000
max_epochs = 1000

early_stopping = EarlyStopping(patience=2)

result = model.fit(x=x_train,
                   y=y_train,
                   batch_size=batch_size,
                   epochs=max_epochs,
                   verbose=1,
                   callbacks=[early_stopping],
                   validation_split=0.2)

# Visualize the result
acc = result.history['accuracy']
val_acc = result.history['val_accuracy']
loss = result.history['loss']
val_loss = result.history['val_loss']

epochs = range(1, len(acc) + 1)

#fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
#sns.set_style("white")
#plt.suptitle('Training Results', size = 15)


# ax1.plot(epochs, acc, "bo", label = "Training accuracy")
# ax1.plot(epochs, val_acc, "b", label = "Validation accuracy")
# ax1.set_title("Training and validation acc")
# ax1.legend()
# ax1.set_ylabel('Accuracy')  # Set y-axis label
# ax1.set_xlabel('Epoch') 

# ax2.plot(epochs, loss, "bo", label = "Training loss", color = 'red')
# ax2.plot(epochs, val_loss, "b", label = "Validation loss", color = 'red')
# ax2.set_title("Training and validation loss")
# ax2.legend()
# ax2.set_ylabel('Cost')  # Set y-axis label
# ax2.set_xlabel('Epoch') 

plt.figure(figsize=(10, 5))
sns.set_style("white")

# Plot accuracy
plt.plot(epochs, acc, "bo", label="Training accuracy")
plt.plot(epochs, val_acc, "b", label="Validation accuracy")

# Plot loss on the same plot
#plt.plot(epochs, loss, "ro", label="Training loss")
#plt.plot(epochs, val_loss, "r", label="Validation loss")

#plt.title("Training Results")
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Value')


plt.show()
test_loss, test_accuracy = model.evaluate(x_test, y_test)

print('\nTest loss: {0:.6f}. Test accuracy: {1:.6f}%'.format(test_loss, test_accuracy*100.))